= Quick recap =

== Entity ==

An entity is a thing which can be distinctly identified. A person, a company, or event is an example of an entity. (This usually goes into the *domain* level)

== Entity Set ==

It is a set (or collection) of entities or instances of an entity type which share the similar properties or attributes.

== Entity Type ==

It is a concept for defining the entities which share the similar properties or attributes

== Example ==

Ann and Jim are member *entities* in VGC's UoD. In OO paritance they are also called objects.

{{{java
package domain;

public class Member { // -- ENTITY TYPE

}
}}}


{{{java
private void run() {

	// -- ENTITIES
	
	Member c = new Member(1, "CTT");
	Member c = new Member(2, "MDG");
	Member c = new Member(3, "FVL");
	
	// -- ENTITY SET
	
	List<Member> members = new ArrayList<>();
	
}}}

{{{java
package domain;

public class Member { // -- ENTITY TYPE

	// -- ATTRIBUTES

	private final int membershipNumber;
	private final String lastName;
	private final String firstName;
} 
}}}


{{{java
package domain;

public class Member { // -- ENTITY TYPE

	// -- ATTRIBUTES

	private final int membershipNumber;
	private final String lastName;
	private final String firstName;
	private final Optional<String> title; // -- Define a optional field (non-required). Also useful to know is the usage of *.orElse()* funciton which can show alternative text.

	public Member(int membershipNumber, String lastName, String firstName) {
		this(membershipNumber, lastName, firstName, null);
	}
	
	public Member(int membershipNumber, String lastName, String firstName, String title) {
		this.membershipNumber = membershipNumber;
		this.lastName = Objects.requireNonNull(lastName); // -- Required attibutes (mandatory)
		this.fistName = Objects.requireNonNull(fistName); // -- Required attibutes (mandatory)
		this.title = Optional.ofNullable(title); // -- Optional attributes
	}
} 
}}}

{{{java
package domain;

public class Member { // -- ENTITY TYPE

	// -- ATTRIBUTES

	private final int membershipNumber;
	private final String lastName;
	private final String firstName;
	private final Optional<String> title; // -- Define a optional field (non-required). Also useful to know is the usage of *.orElse()* funciton which can show alternative text.
	private final LocalDate dateOfBirth; // -- Define a derived attirbute (that can be calculated for example)

	public Member(int membershipNumber, String lastName, String firstName) {
		this(membershipNumber, lastName, firstName, null);
	}
	
	public Member(int membershipNumber, String lastName, String firstName, String title, LocalDate dateOfBirth) {
		this.membershipNumber = membershipNumber;
		this.lastName = Objects.requireNonNull(lastName); // -- Required attibutes (mandatory)
		this.fistName = Objects.requireNonNull(fistName); // -- Required attibutes (mandatory)
		this.title = Optional.ofNullable(title); // -- Optional attributes
		this.dateOfBirth = Objects.requireNonNull(dateOfBitrh); // -- Required attribute (mandatory)
	}
	
	public int getAge() {
		return Period.between(dateOfBirth, LocalDate.now()).getYears();
	}
	
} 
}}}

{{{java
package domain;

public class Member {
	
	private final int membershipNumber;
	
	private final Set<PhoneNumber> phoneNumbers = new HashSet<>(); // -- Instead of limiting yourself to standard classes, create your own ones.
	
	public void addPhoneNumber(PhoneNumber phoneNumber) {
		phoneNumbers.add(phoneNumber);
	}
	
	public Set<PhoneNumber> getPhoneNumbers() {
		return Collections.unmodifiableSet(phoneNumbers);
	}
	
}
}}}

To have a unique parameter, make sure to implement equals and hashCode for that parameter.

== Weak Entity ==

If the existence of an entity depenmds on the existence of another entity, we say the entity is a weak entity.

In order to translate the weak entity into a object, you would make sure that the object you created will have the fields that are necessary for the weak entity.

== Participation and Cardinality ==

The *participation of a relationship* defines the *minimum* number of related entities on a relationship (0 or 1), the *cardinality of a relationship* defines the m*maximum* number of related entities on a relationship (1 or more).

=== One-to-one ===

Means that the class will have a field which can be optional or null, but might as well have a value.

=== One-to-many ===

Means that one of the classes will have certain collection of the needed class. For example, the Member class can have multiple Subscriptions, which means that the Member class will have a collection of Subscriptions inside itself.

=== Many-to-Many ===

It means that each class out of the relationship will have access to a middle class, which will be responsible for gathering information about each opther classes.

== Inheritance ==

Means that we will have a parent class, and then we can extend other classes from it, by using the keyword *extends* in Java, and hence gathering access to the father classses values and override some values aswell.

{{{java
public class FamilyGame extends BoardGame {
	private final int expectedGameDuration;
	
	// Constructor here with access to the parent classs via *super(<values>)* and then your other necessary setters
}
}}}
