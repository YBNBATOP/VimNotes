= Lab 3 PREMA =

= 1st exercise =

First thing I would try to do, is check the strings, with `ResourceHacker`, or `BinText`.

* To get the first flag though, what I did, is try and open it in `dotPeek`, and then check the source code. I managed to find a line that says something related to flag, and then has some text that is being converted from Base64 `Interaction.SaveSetting("Howest Reverse Engineering Examples", "Framework Question", "Flag", frmMain.Base64Decode("ODIxMjE="));`. If you decode this line, then you can get the FLAG (FLAG-82121). After this, I also can see that I need 2 more flags.

* To get the second flag, (FLAG-56819) we need to run the program sandboxed (optional). We need to submit the version (which is 2, we can find that out from *ILSpy binaries* which should say the version number), and then submit, and you get the flag in the text field.

* To get the last flag, what you need to do, is use the `ILSpy Binaries`, and then you will be able to go to the resources, and get to see the FLAG (FLAG-60472). That could not be seen in the *ResourceHacker*, or *dotPeek*

= 2nd exercise =

If you check the strings using `BinText`, you will see that it says that there is only one flag in there.

* To get the first one, first take a look at the strings, and then you get the idea that it should do something like FLAG-00000. To do it, you need to open the `PEExplorer`, and then you need to uncheck the option that it is a DLL file, inside the characteristics. You can also understand that it is supposed to be run as a .exe, as you can check the hex magic bytes. Then you save the file as a .exe, and then you run it, and you get the flag (FLAG-20290).

= 3rd exercise =

* To get the first flag, what you need to do, is try and check the exports of functions via `PEview` or `PEExplorer` (SECTION .rdata > EXPORT Address Table). It is a DLL, hence you need to check it up. Then, you go to the cmd, and try and run it as a dll.

- rundll32.exe .\L3c-Shipme.dll, sayHello

Then you going to get the first flag (FLAG-13012). After, it will also tell you that you are preparing the shipment of 'FLAG'.

- rundll32.exe .\L3c-Shipme.dll, loadShipment 

Then it will say that you need to try harder and etc.

- rundll32.exe .\L3c-Shipme.dll, sendShipment FLAG 

Then you will get the last flag (FLAG-44953). If you try to make it without the "FLAG", then it would say that it cannot find the shipment.

= 4th exercise (IMPORTANT FOR EXAM) =

This one contains 3 flags, this can be seen from the *BinText*. Also curious to know, is that it has a string inside that says that "Rename to Game.exe to arm it". Also, you can find something like "Service.exe" which is inside strings, and might be a file accessed by the program.

To understand if it is a GUI or CLI program based on the headers, go to *PEview* open *IMAGE_NT_HEADERS > IMAGE_OPTIONAL_HEADERS* and on the right look for the *Subsystem* description which can say 0002 (GUI), 0003 (CUI), or 0004 (CLI) in the *Data* column.

To check the MD5 sum you can use powershell with `Get-FileHash <file> -Algorithm MD5`, or use *hashmyfiles* from L2, or *winmd5free*

To understand what kind of Malware it is, we need to check the *SECTION .rdata > IMPORT Address Table*. In there, in this case we can see GetPath, or CopyFile, or something similar. It does not have anything crypto related really, or key stroke, so by method of eliminating we can understand that it is a dropper or backdoor, or spam. But also the name is self explanatory to say its a Dropper.

* To find the first flag, you need to rename the program to either to Game.exe, or Dropper.exe. Then, you need to start it sandboxed, and also start *Process Monitor* and *Process Explorer*. Then, you need to capture the events of PID (found in process explorer). Then, what you can do, is start capturing the filtered events of your process ('regsetvalue', 'createfile', 'writefile' are good filters). Then, you will be able to get an event of Register write. What you can do then, is open it to read the properties, and then in the 'Event' tab, you will be able to find the path. If you scroll the path to the end, you will get the flag (FLAG-87530)

* To find the next flag, what we can do is take a look at the executable with *BinText*, you should be able to find a a line that mentions something related to 'Flag' (To do this, you might need to change the filter option to allow length of 4, OR use *PEview* and read the *SECTION .rdata*). So if you try to rename the Game.exe to Flag.exe - you will get the flag (FLAG-50257) on execution.

* To find the next flag, all you need to do, is find a path where the program tries to access the *Service.exe* (you can/should run it as well). That can be seen from the first flag, where you looked at the event where the executable writes something to the register (RegSetValue). You found a flag there, but now you need to look a bit lower, once you opened the properties of that event. You will see a path *"C:\Users\ybnbatop\Service.exe"*. This is a path, you can access from OUTSIDE of the sandbox, and then access the Sandbox files, and specifically user files, AppData. The path is supposed to be this *C:\Sandbox\ybnbatop\DefaultBox\user\current\AppData\Local\Temp* (without sandboxie it is simply C:\Users\youruser\AppData\Local\Temp*, make sure to show hidden files). You need to check it OUTSIDE of the sandbox, and then you will be able to see and open a file called *ServiceFlag.dat*. You can open it with notepad (right-click), and then you will be able to see the flag (FLAG-60950)

