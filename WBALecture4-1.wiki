= Persistence =

Once we are out there in the wild, we need to know how to bypass defenses, and there are surely new problems to come with that!

Problems that can be met:
* Payloads blocked => defeat the WAF
* Payloads sanitized => defeat the filter
* Obfuscated/opaque attack surface => better mapping
* Limited time => efficient use of tools
* Traffic throttled

The more you know, the more you find!

The methodology says:
* Identify the defense mechanism
* Enumerate the limits
* Encoding
* Obfuscation
* Pattern splitting
* Hide the payload
* Globbing
* Escape the escape

== Identify the defense mechanism ==

Trigger the defense mechanism!

Look for telltale signs:
* Headers
* Cookies
* Error messages
* DNS

Sometimes you can just get some errors that mean that you are restricted. Or maybe you can see that in the headers when we send our requests.

You can aswell just check the DNS of the service you are trying to get:
* whois $(dig +short safeonweb.be | head -n 1) | egrep -i orgname

== Enumerate the limits ==

Are you rate limited?
* What is the max rps?
* Multi-threading?

Keywords blocked?
* Which ones?
* By themselves or in combination?

== Encoding ==

Encoding is a very popular way to hide our payloads, as it can hide them from the WAF, but not from the application.

Encoding is converting a series of characters into another representation format

Encoding != Encryption != Obfuscation != Hashing

* Encoding: represents in a different way, but overall is the same thing!
* Encryption: only the secret key can decrypt the original!
* Obfuscation: intentionally made hard to understand, so it might be a lot of algorithms going on!
* Hashing: scrambling algorithm, cannot be decrypted

With encoding, we hope that the defense mechanism does not recognize the payload with the application, while the application does recognize it.

There are different ways to *encode*:
* Base64
* URL
* Unicode
* Hex
* Octal
* HTML

You can obfuscate your payloads so much with your encoding that it may barely look like something that should work.

But still you need to be accurate, because Hex would work only with strings! Same as unicode I believe! An example of that can be `<script>\u0061lert(1)</script>`

Fun fact: WAF usually block the `alert()` keyword, but they sometimes miss the `eval()` one.

Also, there can be such a situation where you would try and write `javascript:alert(1)`, but it would get blocked. Hence, you could try and make it base64 encoded and put it as `data:text/html;base64,<base64encodedhere>` and that would also be a legit piece of code, because it would need an additional decoding cycle.

URL encoding is also very much used by us, as they are used of course in the URL's. URL decoding happens automatically by http stacks. But sometimes happens twice (ssrf)! Hence, *double URL encoding can smuggle the payload behind the WAF*

Unicode represents characters outside and inside of the ascii range. *Javascript* supports unicode. For example the `a` will be `\u0061`. Something like `<script>\u0061lert(1)</script>` would actually work, as it did work in my exam!

Hex encoding would work only with *strings*! Hence `eval('alert(1)')` would work the same way as encoding alert(1) in hex. Octal works the same way!

Fun fact, that for example if you have a function and parameters for it, you can pass javascript into it too. `console.log('hello&apos;-alert()-&apos;')` would work just fine!

And most important, is that everything can be applied simultaneous! Also it is nice to know that function atob() exists!

== Obfuscation ==

Obfuscation is the art of making something difficult to understand

It take multiple cycles for humans and WAF's to understand

You can:
* Multiple encodings mixed together
* Using novel techniques

== Pattern splitting ==

WAF's & filters rely on recognizing keywords or patterns

Splitting can make detection harder

What happens if the filter only removes the <script> tag once?
* <scri<script>pt>

Or concatenation?
* "</scri"+"pt>"

== Hide the payload ==

Sometimes, a payload can be hidden from the WAF's view

* window.name() object
* URL fragment (location.hash or #)
* out-of-band

== Globbing ==

The bash shell has special characters to match patterns

* ? => Match a single character
* * => Match zero or more characters
* [] => define a range of characters
* {,} or (|) => separate multiple conditions

We use globbing to break patterns a WAF might look for

== Defensive layers ==

We need to account for different layers that can eventually secure us

* Cloud
* Server
* Framework
* Application
* OS

=== Cloud layer ===

Rate-limiting

Determine limit:
* Ip based
* Endpoint based
* header (cookie) based

Throttle requests

Multi-thread

Distribute requests over multiple targets
